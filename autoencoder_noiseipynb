{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from keras.datasets import mnist\n",
    "from keras.layers import Conv2D, Flatten, Activation, Dense, Input\n",
    "from keras.layers import Conv2DTranspose\n",
    "from keras.layers import Reshape\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.models import Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "\n",
    "input_shape = (28, 28, 1)\n",
    "\n",
    "x_train = x_train.reshape((x_train.shape[0], ) + input_shape ) \n",
    "x_test = x_test.reshape((x_test.shape[0], ) + input_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "noise = np.random.normal(loc=0.5, scale=0.5, size=x_train.shape)\n",
    "noise_test = np.random.normal(loc=0.5, scale=0.5, size=x_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_with_noise = np.clip((x_train + noise), 0., 1.)\n",
    "x_test_with_noise = np.clip((x_test + noise_test), 0., 1.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 28, 28, 1)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test_with_noise.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_shape(layer):\n",
    "    shape = ()\n",
    "    for i in layer.shape:\n",
    "        shape += (i.value, )\n",
    "    return shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#encoder\n",
    "encoder_inputs = Input(shape=input_shape)\n",
    "x = encoder_inputs\n",
    "x = Conv2D(filters=32,\n",
    "               kernel_size=(3, 3),\n",
    "               activation='relu',\n",
    "               strides = 2,\n",
    "               padding='same')(x)\n",
    "x = Conv2D(filters=64,\n",
    "               kernel_size=(3, 3),\n",
    "               activation='relu',\n",
    "               strides = 2,\n",
    "               padding='same')(x)\n",
    "shape = get_shape(x)\n",
    "x = Flatten()(x)\n",
    "output = Dense(16)(x)\n",
    "encoder = Model(encoder_inputs, output, name='encoder')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_from_encoder = Input(shape=(16,))\n",
    "x = Dense(shape[1] * shape[2] * shape[3])(input_from_encoder)\n",
    "x = Reshape((shape[1], shape[2], shape[3]))(x)\n",
    "\n",
    "x = Conv2DTranspose(filters=64,\n",
    "                        kernel_size=(3, 3),\n",
    "                        activation='relu',\n",
    "                        strides = 2,\n",
    "                        padding='same')(x)\n",
    "x = Conv2DTranspose(filters=32,\n",
    "                        kernel_size=(3, 3),\n",
    "                        activation='relu',\n",
    "                        strides = 2,\n",
    "                        padding='same')(x)\n",
    "x = Conv2DTranspose(filters=1,\n",
    "                    kernel_size=(3, 3),\n",
    "                    padding='same')(x)\n",
    "\n",
    "output_image = Activation('sigmoid')(x)\n",
    "decoder = Model(input_from_encoder, output_image, name='decoder')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder = Model(encoder_inputs, decoder(encoder(encoder_inputs)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "60000/60000 [==============================] - 192s 3ms/step - loss: 0.0739 - acc: 0.8045\n",
      "Epoch 2/10\n",
      "60000/60000 [==============================] - 250s 4ms/step - loss: 0.0481 - acc: 0.7977\n",
      "Epoch 3/10\n",
      "60000/60000 [==============================] - 213s 4ms/step - loss: 0.0335 - acc: 0.8026\n",
      "Epoch 4/10\n",
      "60000/60000 [==============================] - 176s 3ms/step - loss: 0.0290 - acc: 0.8051\n",
      "Epoch 5/10\n",
      "60000/60000 [==============================] - 244s 4ms/step - loss: 0.0265 - acc: 0.8065\n",
      "Epoch 6/10\n",
      "60000/60000 [==============================] - 303s 5ms/step - loss: 0.0248 - acc: 0.8074\n",
      "Epoch 7/10\n",
      "60000/60000 [==============================] - 420s 7ms/step - loss: 0.0236 - acc: 0.8080\n",
      "Epoch 8/10\n",
      "60000/60000 [==============================] - 410s 7ms/step - loss: 0.0227 - acc: 0.8085\n",
      "Epoch 9/10\n",
      "60000/60000 [==============================] - 297s 5ms/step - loss: 0.0221 - acc: 0.8088\n",
      "Epoch 10/10\n",
      "60000/60000 [==============================] - 234s 4ms/step - loss: 0.0215 - acc: 0.8090\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f893dbb0978>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autoencoder.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\n",
    "autoencoder.fit(x_train_with_noise,\n",
    "                x_train,\n",
    "                epochs=10,\n",
    "                batch_size=256)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_image = x_test_with_noise[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f893d4cc240>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f893de1ae80>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(test_image[:, :, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean = autoencoder.predict(test_image.reshape(1, 28, 28, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f893d401748>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f893d4cccc0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(clean[0, :, :, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f893d385b70>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAADa9JREFUeJzt3X2MXPV1xvHnib1e4jW0OMTGNQYnhKA4NJBqYxK5rRxRp9AEmSiBYqmWK6UsakGCKmqLLEVBaptSFEJpk0ZyihsT8ZYGKFbipkFWW4pKHS+Id9NCqUtcb72AaW0C+AWf/rHX0QZ2fjvM2531+X4ka2buuXfu0fU+e2f2N3d+jggByOcddTcAoB6EH0iK8ANJEX4gKcIPJEX4gaQIP5AU4QeSIvxAUrN7ubM5HozjNNTLXQKpvK4f62AccDPrthV+2+dLuknSLEl/FRHXldY/TkM61+e1s0sABdtia9Prtvyy3/YsSV+TdIGkZZLW2F7W6vMB6K123vMvl/RsRDwXEQcl3SFpdWfaAtBt7YR/saQfTXq8q1r2U2yP2B61PXpIB9rYHYBOaif8U/1R4S3XB0fEhogYjojhAQ22sTsAndRO+HdJWjLp8SmSdrfXDoBeaSf82yWdYfs9tudIulTS5s60BaDbWh7qi4jDtq+U9PeaGOrbGBFPdqwzAF3V1jh/RGyRtKVDvQDoIT7eCyRF+IGkCD+QFOEHkiL8QFKEH0iK8ANJEX4gKcIPJEX4gaQIP5AU4QeSIvxAUoQfSIrwA0kRfiApwg8kRfiBpAg/kBThB5Ii/EBShB9IivADSRF+ICnCDyRF+IGkCD+QFOEHkiL8QFJtzdJre6ek/ZLekHQ4IoY70RSA7msr/JWPR8SLHXgeAD3Ey34gqXbDH5J+YPsh2yOdaAhAb7T7sn9FROy2vUDSfbafjoj7J69Q/VIYkaTjNLfN3QHolLbO/BGxu7odl3SPpOVTrLMhIoYjYnhAg+3sDkAHtRx+20O2jz96X9InJD3RqcYAdFc7L/sXSrrH9tHnuS0ivt+RrgB0Xcvhj4jnJJ3dwV4A9BBDfUBShB9IivADSRF+ICnCDyRF+IGkOnFVXwovXfaxhrVT1z5b3Pbp8YXF+sEDA8X64tvL9bm7XmlYO/LIU8VtkRdnfiApwg8kRfiBpAg/kBThB5Ii/EBShB9IinH+Jv3+793WsPaZoZfLG5/e5s5Xlss7D7/asHbTCx9vc+cz1w/HT2tYG7rhZ4rbzt76UKfb6Tuc+YGkCD+QFOEHkiL8QFKEH0iK8ANJEX4gKUdEz3Z2gufHuT6vZ/vrpB9/9tyGtRc/VP4deuKO8jF++QMu1ud86H+L9evPurthbdU7Xytu+71X5xXrn5zb+LsC2vVaHCzWtx0YKtZXHneo5X2/73uXF+vvH9ne8nPXaVts1b7YW/6BqnDmB5Ii/EBShB9IivADSRF+ICnCDyRF+IGkpr2e3/ZGSZ+SNB4RZ1XL5ku6U9JSSTslXRIR01zUPrMNfWdbodbec5/Q3ub6i5NXNqz90Yql5X3/U3nOgetXvq+Fjpoz+7UjxfrQY2PF+rvuv6tY//k5jec7mLuzPBdCBs2c+b8p6fw3LbtG0taIOEPS1uoxgBlk2vBHxP2S9r5p8WpJm6r7myRd1OG+AHRZq+/5F0bEmCRVtws61xKAXuj6d/jZHpE0IknHaW63dwegSa2e+ffYXiRJ1e14oxUjYkNEDEfE8IAGW9wdgE5rNfybJa2r7q+TdG9n2gHQK9OG3/btkh6UdKbtXbY/J+k6SatsPyNpVfUYwAwy7Xv+iFjToDQzL8w/Bh3+nz0Na0N3Na5J0hvTPPfQd15qoaPO2PNbHyvWPzin/OP75b1nNqwt/evnitseLlaPDXzCD0iK8ANJEX4gKcIPJEX4gaQIP5AUU3SjNrNPW1Ksf3X9V4v1Ac8q1v/mpl9pWHvX2IPFbTPgzA8kRfiBpAg/kBThB5Ii/EBShB9IivADSTHOj9o8/buLi/WPDJZnmn7yYHn68flPvfq2e8qEMz+QFOEHkiL8QFKEH0iK8ANJEX4gKcIPJMU4P7rqwCc/0rD28GdvnGbr8gxPv33VVcX6O//lh9M8f26c+YGkCD+QFOEHkiL8QFKEH0iK8ANJEX4gqWnH+W1vlPQpSeMRcVa17FpJl0l6oVptfURs6VaTmLmev6Dx+WWey+P4a/5zVbE+9/uPFutRrKKZM/83JZ0/xfIbI+Kc6h/BB2aYacMfEfdL2tuDXgD0UDvv+a+0/ZjtjbZP7FhHAHqi1fB/XdLpks6RNCbphkYr2h6xPWp79JAOtLg7AJ3WUvgjYk9EvBERRyR9Q9LywrobImI4IoYHprlQA0DvtBR+24smPfy0pCc60w6AXmlmqO92SSslnWR7l6QvSlpp+xxNjKbslHR5F3sE0AXThj8i1kyx+OYu9IIZ6B3HH1+sr/2lBxrW9h15vbjt+JfeW6wPHtherKOMT/gBSRF+ICnCDyRF+IGkCD+QFOEHkuKru9GWZ679YLH+3ZP+smFt9TOfKW47uIWhvG7izA8kRfiBpAg/kBThB5Ii/EBShB9IivADSTHOj6L/+42PFuuP/fqfF+v/cfhQw9orf3pKcdtBjRXraA9nfiApwg8kRfiBpAg/kBThB5Ii/EBShB9IinH+5GYv/rli/eov3FmsD7r8I3Tpo2sb1t79d1yvXyfO/EBShB9IivADSRF+ICnCDyRF+IGkCD+Q1LTj/LaXSLpF0smSjkjaEBE32Z4v6U5JSyXtlHRJRLzcvVbRCs8u/xef/d1dxfrF814q1m/dv6BYX/iFxueXI8Ut0W3NnPkPS/p8RHxA0kclXWF7maRrJG2NiDMkba0eA5ghpg1/RIxFxMPV/f2SdkhaLGm1pE3VapskXdStJgF03tt6z297qaQPS9omaWFEjEkTvyAklV//AegrTYff9jxJd0m6OiL2vY3tRmyP2h49pAOt9AigC5oKv+0BTQT/1oi4u1q8x/aiqr5I0vhU20bEhogYjojhAQ12omcAHTBt+G1b0s2SdkTEVyaVNktaV91fJ+nezrcHoFuauaR3haS1kh63/Ui1bL2k6yR92/bnJD0v6eLutIi2nH1msfyHC77V1tN/7Uvl//afffTBtp4f3TNt+CPiAUluUD6vs+0A6BU+4QckRfiBpAg/kBThB5Ii/EBShB9Iiq/uPgbMWvb+hrWRO9r77NWyjVcU60u/9a9tPT/qw5kfSIrwA0kRfiApwg8kRfiBpAg/kBThB5JinP8Y8PTvnNiwduHcpr9xbUqn/OPB8goRbT0/6sOZH0iK8ANJEX4gKcIPJEX4gaQIP5AU4QeSYpx/Bnj9wuXF+tYLbyhU53a2GRwzOPMDSRF+ICnCDyRF+IGkCD+QFOEHkiL8QFLTjvPbXiLpFkknSzoiaUNE3GT7WkmXSXqhWnV9RGzpVqOZ7V4xq1g/dXbrY/m37l9QrA/sK1/Pz9X8M1czH/I5LOnzEfGw7eMlPWT7vqp2Y0R8uXvtAeiWacMfEWOSxqr7+23vkLS4240B6K639Z7f9lJJH5a0rVp0pe3HbG+0PeV3SdkesT1qe/SQDrTVLIDOaTr8tudJukvS1RGxT9LXJZ0u6RxNvDKY8gPmEbEhIoYjYnhAgx1oGUAnNBV+2wOaCP6tEXG3JEXEnoh4IyKOSPqGpPLVJwD6yrTht21JN0vaERFfmbR80aTVPi3pic63B6Bbmvlr/wpJayU9bvuRatl6SWtsn6OJ0Z6dki7vSodoy5+8tKxYf/BXlxbrMfZ4B7tBP2nmr/0PSPIUJcb0gRmMT/gBSRF+ICnCDyRF+IGkCD+QFOEHknL0cIrlEzw/zvV5PdsfkM222Kp9sXeqofm34MwPJEX4gaQIP5AU4QeSIvxAUoQfSIrwA0n1dJzf9guS/mvSopMkvdizBt6efu2tX/uS6K1VnezttIh4dzMr9jT8b9m5PRoRw7U1UNCvvfVrXxK9taqu3njZDyRF+IGk6g7/hpr3X9KvvfVrXxK9taqW3mp9zw+gPnWf+QHUpJbw2z7f9r/Zftb2NXX00IjtnbYft/2I7dGae9loe9z2E5OWzbd9n+1nqtspp0mrqbdrbf93dewesf1rNfW2xPY/2N5h+0nbV1XLaz12hb5qOW49f9lve5akf5e0StIuSdslrYmIp3raSAO2d0oajojax4Rt/7KkVyTdEhFnVcuul7Q3Iq6rfnGeGBF/0Ce9XSvplbpnbq4mlFk0eWZpSRdJ+k3VeOwKfV2iGo5bHWf+5ZKejYjnIuKgpDskra6hj74XEfdL2vumxaslbarub9LED0/PNeitL0TEWEQ8XN3fL+nozNK1HrtCX7WoI/yLJf1o0uNd6q8pv0PSD2w/ZHuk7mamsLCaNv3o9OkLau7nzaadubmX3jSzdN8cu1ZmvO60OsI/1VcM9dOQw4qI+AVJF0i6onp5i+Y0NXNzr0wxs3RfaHXG606rI/y7JC2Z9PgUSbtr6GNKEbG7uh2XdI/6b/bhPUcnSa1ux2vu5yf6aebmqWaWVh8cu36a8bqO8G+XdIbt99ieI+lSSZtr6OMtbA9Vf4iR7SFJn1D/zT68WdK66v46SffW2MtP6ZeZmxvNLK2aj12/zXhdy4d8qqGMP5M0S9LGiPjjnjcxBdvv1cTZXpqYxPS2OnuzfbuklZq46muPpC9K+ltJ35Z0qqTnJV0cET3/w1uD3lZq4qXrT2ZuPvoeu8e9/aKkf5b0uKQj1eL1mnh/XduxK/S1RjUcNz7hByTFJ/yApAg/kBThB5Ii/EBShB9IivADSRF+ICnCDyT1//RJwTziTb07AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f893d1bc6d8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_test[0].reshape(28, 28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f893cf53320>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f893d074b70>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = plt.subplots(1, 3, figsize=(12, 12))\n",
    "axes[0].set_title(\"input\")\n",
    "axes[0].imshow(test_image[:, :, 0])\n",
    "axes[1].set_title(\"model\")\n",
    "axes[1].imshow(clean[0, :, :, 0])\n",
    "axes[2].set_title(\"truth\")\n",
    "axes[2].imshow(x_test[0].reshape(28, 28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
